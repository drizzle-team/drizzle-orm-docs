---
import { getStartedItems } from "./data";
import LinkComponent from "./LinkComponent.astro";
import Tag from "../Tag.astro";

const svgs = import.meta.glob<Record<string, any>>("/public/svg/*.svg", {
  query: "?raw",
  import: "default",
});
---

<div style="margin: 24px 0">
  <div class="buttons">
    <button id="new" class="toggle-button selected">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-square-check"
      >
        <rect width="18" height="18" x="3" y="3" rx="2"></rect>
        <path d="m9 12 2 2 4-4"></path>
      </svg>
      New database
    </button>
    <button id="existing" class="toggle-button">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-square-check"
      >
        <rect width="18" height="18" x="3" y="3" rx="2"></rect>
        <path d="m9 12 2 2 4-4"></path>
      </svg>
      Existing database
    </button>
  </div>
  <div class="blocks-container">
    {
      getStartedItems.map((block) => (
        <div>
          <Tag>{block.title}</Tag>
          <div class="links">
            {block.items.map((link) => (
              <LinkComponent svgs={svgs} link={link} />
            ))}
          </div>
        </div>
      ))
    }
  </div>
</div>

<script is:inline define:vars={{ getStartedItems }}>
  const toggleLinks = (type) => {
    switch (type) {
      case "new":
        document.getElementById("new").classList.add("selected");
        document.getElementById("existing").classList.remove("selected");
        getStartedItems.forEach((group) => {
          group.items.forEach((link) => {
            document.getElementById(link.name).href = link.path.new;
          });
        });
        break;
      case "existing":
        document.getElementById("new").classList.remove("selected");
        document.getElementById("existing").classList.add("selected");
        getStartedItems.forEach((group) => {
          group.items.forEach((link) => {
            document.getElementById(link.name).href = link.path.existing;
          });
        });
        break;
    }
  };

  document
    .getElementById("new")
    ?.addEventListener("click", () => toggleLinks("new"));

  document
    .getElementById("existing")
    ?.addEventListener("click", () => toggleLinks("existing"));
</script>

<style>
  .toggle-button {
    align-items: center;
    background-color: hsla(210, 7%, 95%, 0.27);
    border: 1px solid rgba(33, 39, 46, 0.12);
    border-radius: 2px;
    color: #909090;
    display: flex;
    gap: 6px;
    height: 36px;
    padding: 8px;
    transition: all 0.2s;
    font-weight: 600;
    font-size: 14px;
  }

  html.dark .toggle-button {
    background-color: #111;
    border-color: #404040;
    color: #909090;
  }

  .toggle-button svg {
    width: 18px;
    height: 18px;
  }

  .toggle-button svg path {
    opacity: 0;
    transition: opacity 0.2s;
  }

  .selected {
    border-color: #b8bfc8;
    color: #000;
  }

  html.dark .selected {
    background-color: hsla(0, 0%, 100%, 0.05);
    border-color: #686868;
    color: #c4c5c6;
  }

  .selected svg path {
    opacity: 1;
  }

  .toggle-button:hover {
    border-color: #b8bfc8;
    color: #000;
  }

  html.dark .toggle-button:hover {
    background-color: hsla(0, 0%, 100%, 0.05);
    border-color: #686868;
    color: #c4c5c6;
  }

  .buttons {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 12px;
  }

  .title {
    margin-bottom: 0.25rem;
  }

  .blocks-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .links {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(240px, max-content));
    gap: 8px;
  }
</style>
