<script is:inline>
  const lightIconSvg = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-sun"><circle cx="12" cy="12" r="5"/><line x1="12" y1="1" x2="12" y2="3"/><line x1="12" y1="21" x2="12" y2="23"/><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/><line x1="1" y1="12" x2="3" y2="12"/><line x1="21" y1="12" x2="23" y2="12"/><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/></svg>`;

  const darkIconSvg = `<svg fill="none"viewBox="2 2 20 20"width="16"height="16"stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" fill="currentColor" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"/>
    </svg>`;
  const mainScript = () => {
    const currentThemeIcons = document.querySelectorAll(
      "[data-current-theme-icon]",
    );
    const updateIcon = () => {
      const theme = localStorage.getItem("theme");
      if (!theme || !currentThemeIcons) return;
      currentThemeIcons.forEach((currentThemeIcon) => {
        if (theme === "system") {
          currentThemeIcon.innerHTML = window.matchMedia(
            "(prefers-color-scheme: dark)",
          ).matches
            ? darkIconSvg
            : lightIconSvg;
        } else if (theme === "light") {
          currentThemeIcon.innerHTML = lightIconSvg;
        } else if (theme === "dark") {
          currentThemeIcon.innerHTML = darkIconSvg;
        }
      });
      let themeName = "";

      if (theme === "system") {
        themeName = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      } else {
        themeName = theme;
      }
      if (window.inkeepWidget) {
        window.inkeepWidget.update({
          baseSettings: {
            colorMode: {
              forcedColorMode: themeName,
            },
          },
        });
      }
    };

    const dropdownItems = document.getElementById("theme-dropdown-items");
    const themeItems = document.querySelectorAll("[data-theme-value]");

    const themeCurrentBtn = document.getElementById("theme-btn");
    if (themeCurrentBtn) {
      themeCurrentBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        if (dropdownItems) {
          dropdownItems.classList.toggle("d-flex");
        }
      });
    }

    window.addEventListener("click", (e) => {
      const clickedElement = e.target;
      if (!clickedElement.matches(".dialect-selector__button")) {
        if (dropdownItems && dropdownItems.classList.contains("d-flex")) {
          dropdownItems.classList.remove("d-flex");
        }
      }
    });

    if (themeItems) {
      themeItems.forEach((element) => {
        element.addEventListener("click", () => {
          const theme = element.dataset.themeValue;
          if (!theme) return;
          setPreference(theme);
          updateIcon();
          dropdownItems.classList.remove("d-flex");
        });
      });
    }
    updateIcon();
  }
  mainScript();
  document.addEventListener("astro:after-swap", mainScript)
</script>
